# deploy-prod-docker.yaml (API)
name: Deploy API with dockers

on:
  workflow_dispatch:
    inputs:
      confirm_deploy:
        description: 'Are you sure you want to deploy to production? (type "DEPLOY" to confirm)'
        required: true
        type: string

jobs:
  build-and-deploy:
    name: Build and Deploy API docker
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_deploy == 'DEPLOY'
    env:
      SERVER_USER: w3reg
      SERVER_HOST: 65.21.151.227
      SERVER_PORT: 22
      DEPLOY_PATH: /home/w3reg/api.w3reg.org
      SERVICE_NAME: w3registrar-api
      VERSION_TAG: prod
      REDIS_PORT: 16379
      W3REG_PORT: 18080
      CONFIG_PATH: ./config.docker.toml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -t ed25519 ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Create Required files
        run: |
          echo "${{ secrets.CONFIG_DAPI_DOCKER }}" | base64 -d > config.docker.toml
          echo "${{ secrets.KEYFILE_POLKADOT }}" > .keyfile.polkadot
          echo "${{ secrets.KEYFILE_KUSAMA }}" > .keyfile.kusama
          echo "${{ secrets.KEYFILE_ROCOCO }}" > .keyfile.rococo
          echo "${{ secrets.KEYFILE_PASEO }}" > .keyfile.paseo
          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} config.docker.toml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}
          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} .keyfile.polkadot ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/keyfile
          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} .keyfile.kusama ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/keyfile
          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} .keyfile.rococo ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/keyfile
          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} .keyfile.paseo ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/keyfile

      - name: Deploy on Remote Server
        run: |
          ssh -i ~/.ssh/id_ed25519 -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << EOF
            set -euo pipefail
            cd ${{ env.DEPLOY_PATH }}
            docker compose -f ./docker-compose.yaml down || true
            docker image rm w3registrar:prod || true
          EOF

          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} docker-compose.yaml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/docker-compose.yaml

          ssh -i ~/.ssh/id_ed25519 -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << EOF
            set -euo pipefail
            cd ${{ env.DEPLOY_PATH }}
            echo "SERVICE_NAME=${{ env.SERVICE_NAME }}" > .env
            echo "VERSION_TAG=${{ env.VERSION_TAG }}" >> .env
            echo "REDIS_PORT=${{ env.REDIS_PORT }}" >> .env
            echo "W3REG_PORT=${{ env.W3REG_PORT }}" >> .env
            echo "CONFIG_PATH=${{ env.CONFIG_PATH }}" >> .env
            docker tag w3registrar:staging w3registrar:prod
            docker compose -f ./docker-compose.yaml up -d
          EOF
