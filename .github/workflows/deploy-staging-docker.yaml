# deploy-staging-docker.yaml (SAPI)
name: Deploy SAPI with dockers

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy SAPI docker
    runs-on: ubuntu-latest
    env:
      SERVER_USER: w3reg
      SERVER_HOST: 135.181.202.179
      SERVER_PORT: 22
      DEPLOY_PATH: /home/w3reg/sapi.w3reg.org
      SERVICE_NAME: w3registrar-sapi
      VERSION_TAG: staging
      REDIS_PORT: 26379
      W3REG_HTTP_PORT: 28080
      W3REG_WS_PORT: 28081
      CONFIG_PATH: ./config.docker.toml
      KEYFILE_POLKADOT: ${{ secrets.KEYFILE_POLKADOT }}
      KEYFILE_KUSAMA: ${{ secrets.KEYFILE_KUSAMA }}
      KEYFILE_ROCOCO: ${{ secrets.KEYFILE_ROCOCO }}
      KEYFILE_PASEO: ${{ secrets.KEYFILE_PASEO }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t w3registrar:${{ env.VERSION_TAG }} .
          docker save w3registrar:${{ env.VERSION_TAG }} -o w3registrar.tar

      - name: Transfer Docker image to remote server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "w3registrar.tar"
          target: ${{ env.DEPLOY_PATH }}

      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -t ed25519 ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Create Required files
        run: |
          echo "${{ vars.CONFIG_API}}" | base64 -d > config.docker.toml
          ssh -i ~/.ssh/id_ed25519 -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}/keyfile 2>/dev/null || true"
          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} config.docker.toml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}

          # Loop through potential network keyfiles
          for network in polkadot kusama rococo paseo; do
            key_var="KEYFILE_${network^^}"
            key_value="${!key_var}"

            if [ -n "$key_value" ]; then
              echo "$key_value" > .keyfile.$network
              scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} .keyfile.$network ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/keyfile/.keyfile.$network
            fi
          done

      - name: Deploy on Remote Server
        run: |
          ssh -i ~/.ssh/id_ed25519 -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << EOF
            set -euo pipefail
            cd ${{ env.DEPLOY_PATH }}
            docker compose -f ./docker-compose.yaml down || true
            docker image rm w3registrar:${{ env.VERSION_TAG }} || true
          EOF

          scp -i ~/.ssh/id_ed25519 -P ${{ env.SERVER_PORT }} docker-compose.yaml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/docker-compose.yaml
            
          ssh -i ~/.ssh/id_ed25519 -p ${{ env.SERVER_PORT }} ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << EOF
            set -euo pipefail
            cd ${{ env.DEPLOY_PATH }}
            echo "SERVICE_NAME=${{ env.SERVICE_NAME }}" > .env
            echo "VERSION_TAG=${{ env.VERSION_TAG }}" >> .env
            echo "REDIS_PORT=${{ env.REDIS_PORT }}" >> .env
            echo "W3REG_HTTP_PORT=${{ env.W3REG_HTTP_PORT }}" >> .env
            echo "W3REG_WS_PORT=${{ env.W3REG_WS_PORT }}" >> .env
            echo "CONFIG_PATH=${{ env.CONFIG_PATH }}" >> .env
            docker load -i ${{ env.DEPLOY_PATH }}/w3registrar.tar
            docker compose -f ./docker-compose.yaml up -d
          EOF
