name: Deploy DAPI

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_DIR: sapi-w3registrar
  VERSION_TAG: staging
  CONFIG_PATH: ./config.docker.toml
  SERVICE_NAME: sapi-w3registrar
  REDIS_PORT: 26379
  POSTGRES_PORT: 25432
  SSL_CERT: ${{ secrets.SSL_CERT }}
  KEYFILE_POLKADOT: ${{ secrets.KEYFILE_POLKADOT }}
  KEYFILE_KUSAMA: ${{ secrets.KEYFILE_KUSAMA }}
  KEYFILE_ROCOCO: ${{ secrets.KEYFILE_ROCOCO }}
  KEYFILE_PASEO: ${{ secrets.KEYFILE_PASEO }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t w3registrar:${{ env.VERSION_TAG }} .
          docker save w3registrar:${{ env.VERSION_TAG }} | gzip > sapi-w3registrar.tar.gz

      - name: Create required files
        env:
          AGE_PRIVATE_KEY: ${{ secrets.AGE_PRIVATE_KEY }}
        run: |
          sudo apt-get update
          sudo apt-get install -y age

          mkdir -p distfiles

          printf '%s' "$AGE_PRIVATE_KEY" > age-key.txt
          age --decrypt -i ./age-key.txt --output distfiles/${{ env.CONFIG_PATH }} configs/config.development.age
          shred -u age-key.txt

          echo "${{ secrets.SSL_CERT }}" | base64 -d > distfiles/ssl_cert.pem

          for network in polkadot kusama rococo paseo; do
            key_var="KEYFILE_${network^^}"
            key_value="${!key_var}"

            if [ -n "$key_value" ]; then
              echo "$key_value" > "distfiles/.keyfile.$network"
            fi
          done

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: "sapi-w3registrar.tar.gz,docker-compose.yaml,distfiles/*"
          target: "/home/${{ secrets.DEPLOY_USER }}/${{ env.PROJECT_DIR }}"

      - name: Zero-downtime deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd "/home/${{ secrets.DEPLOY_USER }}/${{ env.PROJECT_DIR }}"
            
            cp distfiles/* .
            rm -rf distfiles/

            echo "SERVICE_NAME=${{ env.SERVICE_NAME }}" > .env
            echo "VERSION_TAG=${{ env.VERSION_TAG }}" >> .env
            echo "REDIS_PORT=${{ env.REDIS_PORT }}" >> .env
            echo "POSTGRES_PORT=${{ env.POSTGRES_PORT }}" >> .env
            echo "CONFIG_PATH=${{ env.CONFIG_PATH }}" >> .env

            # Stop existing dev containers to avoid port conflicts
            podman compose down || true
            podman stop $(podman ps --filter "name=dev" -q) 2>/dev/null || true
            podman stop $(podman ps --filter "name=${{ env.SERVICE_NAME }}" -q) 2>/dev/null || true

            podman load -i sapi-w3registrar.tar.gz
            podman tag $(podman images --format "{{.Repository}}:{{.Tag}}" | head -1) w3registrar:${{ env.VERSION_TAG }}
            podman compose up -d
            rm sapi-w3registrar.tar.gz
