services:
  redis:
    image: redis:7-alpine
    container_name: redis-${VERSION_TAG:-prod}
    restart: always
    ports:
      - "127.0.0.1:${REDIS_PORT:-16379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - w3r_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    command: ["redis-server", "--bind", "0.0.0.0"]

  w3registrar:
    build:
      context: .
      dockerfile: Dockerfile
      tags:
        - "w3registrar:${VERSION_TAG:-prod}"
    image: w3registrar:${VERSION_TAG:-prod}
    container_name: ${SERVICE_NAME:-w3registrar}
    restart: always
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "${W3REG_PORT:-18080}:8080"
    networks:
      - w3r_network
    volumes:
      - ${CONFIG_PATH:-./config.toml}:/etc/w3registrar/config.toml:ro
      - ${KEYFILE:-./keyfile}:/etc/w3registrar/keyfile:ro
    environment:
      - CONFIG_PATH=/etc/w3registrar/config.toml
      - RUST_LOG=info
      - KEYFILE_PATH=/etc/w3registrar/keyfile
    labels:
      # Please make sure to run autoheal container to enable restart if the container is unhealthy
      autoheal: true
    healthcheck:
      test: |
        echo $(
          echo '{
            "version":"1.0",
            "type":"SubscribeAccountState",
            "payload":{
              "account":"5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY",
              "network":"paseo"
            }
          }' 
        ) \
        | websocat ws://127.0.0.1:${W3REG_PORT:-8080} \
        | jq 'select(.type == "JsonResult")
          | select(
            .payload.message.AccountState.account and
            .payload.message.AccountState.hashed_info and
            .payload.message.AccountState.network and
            (.payload.message.AccountState.pending_challenges | type == "array") and
            (.payload.message.AccountState.verification_state.fields | type == "object")
          )
          | select(
            all(.payload.message.AccountState.pending_challenges[]; 
              (type=="array" and length == 2 and (.[0] | type == "string") and (.[1] | type == "string"))
            )
          )
        '
      interval: 20s
      timeout: 10s
      retries: 3


volumes:
  redis_data:

networks:
  w3r_network:
    name: w3r_${VERSION_TAG:-prod}_network
    driver: bridge
